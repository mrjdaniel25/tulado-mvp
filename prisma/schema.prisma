generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { USER ADMIN }
enum BookingStatus { PENDING ACCEPTED REJECTED CANCELLED ACTIVE COMPLETED DISPUTED }
enum DeliveryOption { PICKUP DELIVERY }
enum PayoutStatus { PENDING PAID HELD }
enum IdentityStatus { UNVERIFIED PENDING VERIFIED REJECTED }

model User {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  email      String    @unique
  phone      String?
  name       String?
  role       Role      @default(USER)
  identity   Identity?
  location   Location?
  tools      Tool[]
  bookings   Booking[] @relation("BookingRenter")
  rentals    Booking[] @relation("BookingOwner")
  reviews    Review[]
  payouts    Payout[]
}

model Tool {
  id              String    @id @default(cuid())
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id])
  title           String
  category        String
  pricePerDayCents Int
  depositCents    Int?
  photos          Json?
  lat             Float
  lng             Float
  geohash         String?
  addressHint     String?
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
  reviews         Review[]
}

model Booking {
  id            String        @id @default(cuid())
  toolId        String
  tool          Tool          @relation(fields: [toolId], references: [id])
  ownerId       String
  owner         User          @relation("BookingOwner", fields: [ownerId], references: [id])
  renterId      String
  renter        User          @relation("BookingRenter", fields: [renterId], references: [id])
  status        BookingStatus @default(PENDING)
  startDate     DateTime
  endDate       DateTime
  totalCents    Int
  depositHoldCents Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  booking    Booking  @relation(fields: [bookingId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

model Payout {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amountCents Int
  status      PayoutStatus @default(PENDING)
  createdAt   DateTime @default(now())
}

model Location {
  id       String  @id @default(cuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  lat      Float
  lng      Float
  geohash  String?
  address  String?
}

model Identity {
  id      String         @id @default(cuid())
  userId  String         @unique
  user    User           @relation(fields: [userId], references: [id])
  status  IdentityStatus @default(UNVERIFIED)
}
