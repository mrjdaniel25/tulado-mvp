
generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql" url = env("DATABASE_URL") }

enum Role { USER ADMIN }
enum BookingStatus { PENDING ACCEPTED REJECTED CANCELLED ACTIVE COMPLETED DISPUTED }
enum DeliveryOption { PICKUP DELIVERY }
enum PayoutStatus { PENDING PAID HELD }
enum IdentityStatus { UNVERIFIED PENDING VERIFIED REJECTED }

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String   @unique
  phone        String?
  name         String?
  role         Role     @default(USER)
  identity     Identity?
  location     Location?
  tools        Tool[]
  bookings     Booking[] @relation("BookingRenter")
  rentals      Booking[] @relation("BookingOwner")
  reviews      Review[]
  payouts      Payout[]
}

model Identity {
  id        String   @id @default(cuid())
  userId    String   @unique
  status    IdentityStatus @default(UNVERIFIED)
  provider  String?
  ref       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Location {
  id        String   @id @default(cuid())
  userId    String   @unique
  lat       Float
  lng       Float
  geohash   String   @db.VarChar(16)
  city      String?
  state     String?
  country   String?
  user      User     @relation(fields: [userId], references: [id])
}

model Tool {
  id          String   @id @default(cuid())
  ownerId     String
  title       String
  description String?
  category    String
  pricePerDay Int
  deposit     Int
  photos      String[]
  lat         Float
  lng         Float
  geohash     String   @db.VarChar(16)
  addressHint String?
  isActive    Boolean  @default(true)
  owner       User     @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
}

model Booking {
  id            String   @id @default(cuid())
  toolId        String
  ownerId       String
  renterId      String
  startDate     DateTime
  endDate       DateTime
  totalCents    Int
  depositCents  Int
  status        BookingStatus @default(PENDING)
  delivery      DeliveryOption @default(PICKUP)
  deliveryFee   Int @default(0)
  addressNote   String?
  stripePiId    String?
  stripeSiId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tool          Tool     @relation(fields: [toolId], references: [id])
  renter        User     @relation("BookingRenter", fields: [renterId], references: [id])
  owner         User     @relation("BookingOwner", fields: [ownerId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  toolId    String
  authorId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Payout {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  status    PayoutStatus @default(PENDING)
  external  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
